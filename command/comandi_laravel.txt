
// SINGOLARE e PLURALE in LARAVEL

SINGOLARE: nome Classe / PLURALE: nome Tabella, nome Resource URI, nome folder Resources/Views/NomeFolderAlPlurale

SINTASSI SPECIALI

RIFERIRTI A CONTROLLER NELLA ROUTE

	Route::get('/', [PageController::class, 'index']);

NAMESPACE

	namespace App\Http\Controllers\Guest\NomeClasse as NomeCheDicoIo;

IMG che prende da resources

	<img class="icon" src="{{Vite::asset($icon['icon'])}}">

ROUTE SU HREF

	<a href"{{route('nomeRotta')}}">HOME</a>

LINKARE STYLE E BOOTSTRAP E SCSS
	
	@vite('resources/js/app.js');

CAMBIO CLASSE CON TERNARIO

	class="{{Route::currentRouteName() == 'home'?'bg-white':''}}"

LAYOUT extends

	@extends('layouts.app')//path con dot notation

	come mettere la roba al posto del segnaposto fatto prima
	nel layout?

SEGNAPOSTO

	 @yield('page-title') sull html

SECTION
	@section('page-title')
		Home Page//scrivi cosa vuoi
	@endsection

	altra sintassi a una riga se vuoi mettere solo testo
	
	@section('page-title','Home Page title')

	@section('content')
		<h1>Benvenuto</h1>//puoi mettere codice html
		<ul>
			<li>come cuocere pasta</li>
			<li>come bollireacqua</li>
		</ul>
	@endsection

FARE QUERY SU DB DA LARAVEL SU FN CONTROLLER USANDO MODEL

	$books = Book::all(); //books è la tabella su MySQL
	return view('home', compact('books'));

ACCEDERE ALL OGGETTO BOOK CON FOREACH

	@foreach($books as $book)
		{{$book->id}} //ricorda che book è un oggetto di una collection

BLOCCA I TIMESTAMPS SUL ->save()

	nella classe Book inserisci

	public $timestamps = false;


PUNTARE A UNA TABELLA SU ELOQUENT CHE NON SIA PLURALE

	dentro la classe creata che extends a Model crei proprieta
	
	protected $table = 'nome_vero_tabella_database';

CICLO @forelse

	@forelse($movies as $movie) fa IF e FOREACH con ELSE
		///codice di if con elementi ciclati;
	@empty
		//codice di else se $movies fosse vuoto;
	@endforelse

FILTRARE I DATI

	nella funzione del tuo Controller dove assegni il valore a una classe

	$movies = Movie::where('vote', '>', 9)->where('nationality','italian')-get>();

	per debuggare la query

	$movies = Movie::where('vote', '>', 9)->where('nationality','italian')-toSql>();
	dd($movies);

	per cercare solo uno specifico elemento che punta all id
	$movie = Movie::find(4)->get();

	Per trovare il primo elemento con quei criteri
	$movies = Movie::where('vote', '>', 9)->first();

MIGRAZIONI

	crea tabella con colonne

	public function up(){
	
		Schema::create('nomeTabella', function (Blueprint $table){

		$table->string('nome_tabella', 30) //crei tabelle con tipo di dato
		});

	} 
	
	cancella contenuto tabella

	public function down(){

		Schema::drop($nomeTabella)
	}

CREARE CON CICLO FOR N ESATTO DI ISTANZE CON ATTRIBUTI FAKER

	
	all interno del run() del seeder // ricorda di importare il Faker -> use Faker\Generator as Faker;
	
	for($i = 0; $i < 10; $i++){
	
	
		$house = new House(); //creo nuova istanza House:
		
		//vedo sulla documentazione di faker le possibili funzioni
		$house->room_number = $faker->randomDigitNotNull(); //assegno room_number col faker;


	}


la migration serve a definire il db e le tabelle o
modificarle

il seeder serve a popolare le tabelle

il model al singolare serve ad andare a prendere i dati
dalla tabella al plurale sul db

le resources controller servono ad avere gia tutte le funzioni 
crud dentro un controller creato da laravel, da collegare alle rotte

il controller serve a creare delle funzioni che prendono
i dati dalle tabelle sul db usando il model e portandolo
sottoforma di array associativo sulle viste

Le routes collegano un URL specifico a un'azione o a una funzione del tuo codice,
configurando la nostra applicazione in modo tale da rispondere ad una certa URI.
La routes la ottieni tranquillamente digitando php artisan route:list nel terminale.

// IMPORTARE PROGETTO

clonare progetto
composer install
npm install
copia file .env.example in un nuovo file .env
inserire i dati corretti del db
php artisan key:generate (crea una chiave per APP_KEY nel file .env)

// CREARE NUOVO BRANCH
clicca in basso a sx su main
crea nuova branch

// MERGE
clicca in basso su git graph
clic destro su main a fai checkout branch

// FARE PULL
vai su source control a sx->vai su ... in alto->pull

torna su git graph
tasto destro sul branch e fai merge into current branch